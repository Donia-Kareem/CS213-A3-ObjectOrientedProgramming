{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\c++config.h","lines":[306]}],"prevLine":"*/","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\c++config.h","lines":[532]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\memoryfwd.h","lines":[50]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stringfwd.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V677","currLine":"  typedef __gnuc_va_list va_list;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'va_list' type. The declaration from system header files should be used instead.","nextLine":"#elif defined(_MSC_VER)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\vadefs.h","lines":[31]}],"prevLine":"#if defined(__GNUC__)","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"__MINGW_EXTENSION typedef unsigned __int64 size_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'size_t' type. The declaration from system header files should be used instead.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[35]}],"prevLine":"#ifdef _WIN64","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"__MINGW_EXTENSION typedef __int64 intptr_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'intptr_t' type. The declaration from system header files should be used instead.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[62]}],"prevLine":"#ifdef _WIN64","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"__MINGW_EXTENSION typedef unsigned __int64 uintptr_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'uintptr_t' type. The declaration from system header files should be used instead.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[75]}],"prevLine":"#ifdef _WIN64","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"__MINGW_EXTENSION typedef __int64 ptrdiff_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ptrdiff_t' type. The declaration from system header files should be used instead.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[88]}],"prevLine":"#ifdef _WIN64","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"typedef unsigned short wint_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'wint_t' type. The declaration from system header files should be used instead.","nextLine":"typedef unsigned short wctype_t;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[106]}],"prevLine":"#define _WINT_T","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"typedef unsigned short wctype_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'wctype_t' type. The declaration from system header files should be used instead.","nextLine":"#endif /* _WINT_T */","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[107]}],"prevLine":"typedef unsigned short wint_t;","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"typedef int errno_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'errno_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[113]}],"prevLine":"#define _ERRCODE_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"typedef long __time32_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '__time32_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[118]}],"prevLine":"#define _TIME32_T_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"__MINGW_EXTENSION typedef __int64 __time64_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '__time64_t' type. The declaration from system header files should be used instead.","nextLine":"#endif /* _TIME64_T_DEFINED */","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[123]}],"prevLine":"#define _TIME64_T_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"typedef __time64_t time_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'time_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[138]}],"prevLine":"#else","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"} _locale_tstruct,*_locale_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_locale_t' type. The declaration from system header files should be used instead.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h","lines":[439]}],"prevLine":"  pthreadmbcinfo mbcinfo;","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef struct _iobuf FILE;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'FILE' type. The declaration from system header files should be used instead.","nextLine":"#define _FILE_DEFINED","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[52]}],"prevLine":"  };","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef unsigned long _fsize_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_fsize_t' type. The declaration from system header files should be used instead.","nextLine":"#define _FSIZE_T_DEFINED","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[82]}],"prevLine":"#ifndef _FSIZE_T_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef unsigned short _ino_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_ino_t' type. The declaration from system header files should be used instead.","nextLine":"#ifndef NO_OLDNAMES","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[398]}],"prevLine":"#define _INO_T_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef unsigned short ino_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ino_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[400]}],"prevLine":"#ifndef NO_OLDNAMES","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef unsigned int _dev_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_dev_t' type. The declaration from system header files should be used instead.","nextLine":"#ifndef NO_OLDNAMES","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[406]}],"prevLine":"#define _DEV_T_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef unsigned int dev_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'dev_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[408]}],"prevLine":"#ifndef NO_OLDNAMES","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef long _off_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_off_t' type. The declaration from system header files should be used instead.","nextLine":"#if !defined(NO_OLDNAMES) || defined(_POSIX)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\_mingw_off_t.h","lines":[5]}],"prevLine":"#define _OFF_T_","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"typedef off32_t off_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'off_t' type. The declaration from system header files should be used instead.","nextLine":"#endif /* #if !defined(NO_OLDNAMES) || defined(_POSIX) */","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\_mingw_off_t.h","lines":[26]}],"prevLine":"#else","sastId":"CERT-DCL37-C"}
{"code":"V802","currLine":"  struct _stat32i64 {","falseAlarm":false,"level":2,"message":"On 64-bit platform, structure size can be reduced from 48 to 40 bytes by rearranging the fields according to their sizes in decreasing order.","nextLine":"    _dev_t st_dev;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\_mingw_stat64.h","lines":[55]}]}
{"code":"V677","currLine":"  typedef int mbstate_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'mbstate_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[1445]}],"prevLine":"#else","sastId":"CERT-DCL37-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\cwchar","lines":[137]}],"prevLine":"{","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\postypes.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\iosfwd","lines":[44]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\exception.h","lines":[40]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\exception","lines":[40]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\cxxabi_init_exception.h","lines":[50]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\hash_bytes.h","lines":[37]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\typeinfo","lines":[84]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std ","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\new","lines":[47]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\new","lines":[186]}],"prevLine":"#if __cplusplus >= 201703L","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\new","lines":[219]}],"prevLine":"#if __cplusplus > 201703L","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\move.h","lines":[38]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\type_traits","lines":[40]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\move.h","lines":[59]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\exception_ptr.h","lines":[52]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\nested_exception.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\concepts","lines":[46]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\compare","lines":[43]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ptr_traits.h","lines":[49]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_cmp.h","lines":[37]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\iterator_concepts.h","lines":[40]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator_base_types.h","lines":[74]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator_base_funcs.h","lines":[68]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V560","currLine":"      if constexpr (__cplusplus > 201703L && is_array_v<_Tp>)","cwe":571,"falseAlarm":false,"level":2,"message":"A part of conditional expression is always true: 202002L > 201703L.","nextLine":" {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_construct.h","lines":[82]}],"prevLine":"    {"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_construct.h","lines":[73]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V835","currLine":"      to_char_type(const int_type& __c)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return static_cast<char_type>(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[162]}],"prevLine":"      static _GLIBCXX_CONSTEXPR char_type"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[170]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[170]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      not_eof(const int_type& __c)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[179]}],"prevLine":"      static _GLIBCXX_CONSTEXPR int_type"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[315]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V835","currLine":"      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[361]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR void"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[372]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[372]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[376]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[376]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      find(const char_type* __s, size_t __n, const char_type& __a)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[413]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR const char_type*"}
{"code":"V835","currLine":"      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return static_cast<char_type>(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[461]}],"prevLine":"      static _GLIBCXX_CONSTEXPR char_type"}
{"code":"V835","currLine":"      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[467]}],"prevLine":"      static _GLIBCXX_CONSTEXPR int_type"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[471]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[471]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return (__c == eof()) ? 0 : __c; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[480]}],"prevLine":"      static _GLIBCXX_CONSTEXPR int_type"}
{"code":"V835","currLine":"      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[503]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR void"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[514]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[514]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[518]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[518]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      find(const char_type* __s, size_t __n, const char_type& __a)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[544]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR const char_type*"}
{"code":"V835","currLine":"      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return char_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[592]}],"prevLine":"      static _GLIBCXX_CONSTEXPR char_type"}
{"code":"V835","currLine":"      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return int_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[596]}],"prevLine":"      static _GLIBCXX_CONSTEXPR int_type"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[600]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[600]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return eq_int_type(__c, eof()) ? 0 : __c; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[609]}],"prevLine":"      static _GLIBCXX_CONSTEXPR int_type"}
{"code":"V835","currLine":"      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[635]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR void"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[646]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[646]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[650]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[650]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      find(const char_type* __s, size_t __n, const char_type& __a)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[679]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR const char_type*"}
{"code":"V835","currLine":"      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return char_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[727]}],"prevLine":"      static _GLIBCXX_CONSTEXPR char_type"}
{"code":"V835","currLine":"      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return int_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[731]}],"prevLine":"      static _GLIBCXX_CONSTEXPR int_type"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[735]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[735]}],"prevLine":"      static _GLIBCXX_CONSTEXPR bool"}
{"code":"V835","currLine":"      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return eq_int_type(__c, eof()) ? 0 : __c; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[744]}],"prevLine":"      static _GLIBCXX_CONSTEXPR int_type"}
{"code":"V835","currLine":"      assign(char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[780]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR void"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[791]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[791]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[795]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[795]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      find(const char_type* __s, size_t __n, const char_type& __a)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[819]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR const char_type*"}
{"code":"V835","currLine":"      to_char_type(const int_type& __c) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return char_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[862]}],"prevLine":"      static constexpr char_type"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[866]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[866]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      to_int_type(const char_type& __c) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[871]}],"prevLine":"      static constexpr int_type"}
{"code":"V835","currLine":"      not_eof(const int_type& __c) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return eq_int_type(__c, eof()) ? 0 : __c; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[879]}],"prevLine":"      static constexpr int_type"}
{"code":"V835","currLine":"      assign(char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[909]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR void"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[920]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      eq(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[920]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[924]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      lt(const char_type& __c1, const char_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 < __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[924]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      find(const char_type* __s, size_t __n, const char_type& __a)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the third argument by value.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[948]}],"prevLine":"      static _GLIBCXX17_CONSTEXPR const char_type*"}
{"code":"V835","currLine":"      to_char_type(const int_type& __c) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return char_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[991]}],"prevLine":"      static constexpr char_type"}
{"code":"V835","currLine":"      to_int_type(const char_type& __c) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return int_type(__c); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[995]}],"prevLine":"      static constexpr int_type"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[999]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the second argument by value.","nextLine":"      { return __c1 == __c2; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[999]}],"prevLine":"      static constexpr bool"}
{"code":"V835","currLine":"      not_eof(const int_type& __c) noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return eq_int_type(__c, eof()) ? 0 : __c; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[1008]}],"prevLine":"      static constexpr int_type"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\char_traits.h","lines":[755]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V677","currLine":"  __MINGW_EXTENSION typedef __int64 fpos_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'fpos_t' type. The declaration from system header files should be used instead.","nextLine":"#define _FPOSOFF(fp) ((long)(fp))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdio.h","lines":[115]}],"prevLine":"#if (!defined(NO_OLDNAMES) || defined(__GNUC__))","sastId":"CERT-DCL37-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\c++locale.h","lines":[45]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V575","currLine":"    if (__builtin_strcmp(__old, \"C\"))","cwe":628,"falseAlarm":false,"level":3,"message":"The potential null pointer is passed into '__builtin_strcmp' function. Inspect the first argument.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\c++locale.h","lines":[62]}],"prevLine":"    char* __sav = 0;","sastId":"CERT-EXP37-C"}
{"code":"V526","currLine":"    if (__builtin_strcmp(__old, \"C\"))","cwe":253,"falseAlarm":false,"level":3,"message":"The '__builtin_strcmp' function returns 0 if corresponding strings are equal. Consider examining the condition for mistakes.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\c++locale.h","lines":[62]}],"prevLine":"    char* __sav = 0;"}
{"code":"V835","currLine":"  __convert_from_v(const __c_locale&, char* ___out,","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"     const int __size __attribute__((__unused__)),","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\c++locale.h","lines":[56]}],"prevLine":"  inline int"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\localefwd.h","lines":[44]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V677","currLine":"typedef int (__cdecl *_onexit_t)(void);","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_onexit_t' type. The declaration from system header files should be used instead.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\corecrt_startup.h","lines":[30]}],"sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef int sig_atomic_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'sig_atomic_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\signal.h","lines":[18]}],"prevLine":"#define _SIG_ATOMIC_T_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef long clock_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'clock_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\time.h","lines":[63]}],"prevLine":"#define _CLOCK_T_DEFINED","sastId":"CERT-DCL37-C"}
{"code":"V802","currLine":"{","falseAlarm":false,"level":2,"message":"On 64-bit platform, structure size can be reduced from 32 to 24 bytes by rearranging the fields according to their sizes in decreasing order.","nextLine":"    unsigned p_state;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[244]}],"prevLine":"struct pthread_attr_t"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\functexcept.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\new_allocator.h","lines":[88]}],"prevLine":"      _GLIBCXX20_CONSTEXPR"}
{"code":"V832","currLine":"      allocator() _GLIBCXX_NOTHROW { }","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\allocator.h","lines":[163]}],"prevLine":"      _GLIBCXX20_CONSTEXPR"}
{"code":"V832","currLine":"      ~allocator() _GLIBCXX_NOTHROW { }","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\allocator.h","lines":[184]}],"prevLine":"#endif"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\allocator.h","lines":[54]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\cpp_type_traits.h","lines":[69]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ostream_insert.h","lines":[39]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V690","currLine":"    class reverse_iterator","falseAlarm":false,"level":3,"message":"The 'reverse_iterator' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class.","nextLine":"    : public iterator<typename iterator_traits<_Iterator>::iterator_category,","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[136]}],"prevLine":"  template<typename _Iterator>"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[88]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1350]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"    common_iterator()","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"    noexcept(is_nothrow_default_constructible_v<_It>)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1907]}],"prevLine":"    constexpr"}
{"code":"V833","currLine":"       _M_it = std::move(__x._M_it);","falseAlarm":false,"level":2,"message":"Passing the const-qualified object '__x._M_it' to the 'std::move' function disables move semantics.","nextLine":"     else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1937]}],"prevLine":"     if constexpr (is_trivially_default_constructible_v<_It>)"}
{"code":"V833","currLine":"       _M_sent = std::move(__x._M_sent);","falseAlarm":false,"level":2,"message":"Passing the const-qualified object '__x._M_sent' to the 'std::move' function disables move semantics.","nextLine":"     else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1944]}],"prevLine":"     if constexpr (is_trivially_default_constructible_v<_Sent>)"}
{"code":"V614","currLine":"      if (_M_index == 0)","cwe":457,"falseAlarm":false,"level":1,"message":"Uninitialized variable '_M_index' used.","nextLine":" {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1958]}],"prevLine":"    {","sastId":"CERT-EXP53-CPP"}
{"code":"V614","currLine":"      if (_M_index == 0)","cwe":457,"falseAlarm":false,"level":1,"message":"Uninitialized variable '_M_index' used.","nextLine":" {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1982]}],"prevLine":"    {","sastId":"CERT-EXP53-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_function.h","lines":[63]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      pointer_to_unary_function() { }","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_function.h","lines":[1111]}],"prevLine":"    public:"}
{"code":"V832","currLine":"      pointer_to_binary_function() { }","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_function.h","lines":[1138]}],"prevLine":"    public:"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\backward\\binders.h","lines":[63]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\utility.h","lines":[43]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_pair.h","lines":[69]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bit","lines":[55]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_algobase.h","lines":[82]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\invoke.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\refwrap.h","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\initializer_list","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\range_access.h","lines":[40]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\alloc_traits.h","lines":[43]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\functional_hash.h","lines":[38]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V690","currLine":"    struct __poison_hash","falseAlarm":false,"level":3,"message":"The move constructor is declared as private in the '__poison_hash' class, but the default move assignment operator will still be generated by compiler. It is dangerous to use such a class.","nextLine":"    {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\functional_hash.h","lines":[62]}],"prevLine":"  template<typename _Tp, typename = void>"}
{"code":"V550","currLine":" return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __val != 0.0f. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon.","nextLine":"      }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\functional_hash.h","lines":[246]}],"prevLine":" // 0 and -0 both hash to zero.","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __val != 0.0. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon.","nextLine":"      }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\functional_hash.h","lines":[258]}],"prevLine":" // 0 and -0 both hash to zero.","sastId":"CERT-FLP02-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\numbers","lines":[38]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\max_size_type.h","lines":[48]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V601","currLine":"   return _M_rep <=> __r._M_rep;","cwe":704,"falseAlarm":false,"level":2,"message":"The bool type is implicitly cast to the class type.","nextLine":"      }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\max_size_type.h","lines":[721]}],"prevLine":" else","sastId":"CERT-INT36-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_base.h","lines":[42]}],"prevLine":"#ifdef __cpp_lib_concepts","sastId":"CERT-DCL58-CPP"}
{"code":"V813","currLine":"    __to_unsigned_like(__max_size_type __t) noexcept","falseAlarm":false,"level":2,"message":"Decreased performance. The '__t' argument should probably be rendered as a constant reference.","nextLine":"    { return __t; }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_base.h","lines":[56]}],"prevLine":"    constexpr __max_size_type"}
{"code":"V813","currLine":"    __to_unsigned_like(__max_diff_type __t) noexcept","falseAlarm":false,"level":2,"message":"Decreased performance. The '__t' argument should probably be rendered as a constant reference.","nextLine":"    { return __max_size_type(__t); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_base.h","lines":[60]}],"prevLine":"    constexpr __max_size_type"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\string_view","lines":[56]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V835","currLine":"      operator()(const string_view& __str) const noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return std::_Hash_impl::hash(__str.data(), __str.length()); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\string_view","lines":[786]}],"prevLine":"      size_t"}
{"code":"V835","currLine":"      operator()(const wstring_view& __s) const noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return std::_Hash_impl::hash(__s.data(),","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\string_view","lines":[800]}],"prevLine":"      size_t"}
{"code":"V835","currLine":"      operator()(const u8string_view& __str) const noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return std::_Hash_impl::hash(__str.data(), __str.length()); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\string_view","lines":[816]}],"prevLine":"      size_t"}
{"code":"V835","currLine":"      operator()(const u16string_view& __s) const noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return std::_Hash_impl::hash(__s.data(),","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\string_view","lines":[831]}],"prevLine":"      size_t"}
{"code":"V835","currLine":"      operator()(const u32string_view& __s) const noexcept","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, pass the first argument by value.","nextLine":"      { return std::_Hash_impl::hash(__s.data(),","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\string_view","lines":[846]}],"prevLine":"      size_t"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\string_view.tcc","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V769","currLine":" _M_construct(__s, __s + __n, std::forward_iterator_tag());","cwe":119,"falseAlarm":false,"level":3,"message":"The '__s' pointer in the '__s + __n' expression could be nullptr. In such case, resulting value will be senseless and it should not be used.","nextLine":"      }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[628]}],"prevLine":"           \"construction from null is not valid\"));","sastId":"CERT-EXP08-C"}
{"code":"V659","currLine":"      at(size_type __n)","falseAlarm":false,"level":3,"message":"Declarations of functions with 'at' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 1275, 1297.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[1297,1275]}],"prevLine":"      reference"}
{"code":"V553","currLine":"    class basic_string","falseAlarm":false,"level":3,"message":"The length of 'basic_string' class's declaration is more than 2000 lines long. You should consider refactoring the code.","nextLine":"    {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[85]}],"prevLine":"  template<typename _CharT, typename _Traits, typename _Alloc>"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[3491]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V677","currLine":"  typedef int (__cdecl *_onexit_t)(void);","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_onexit_t' type. The declaration from system header files should be used instead.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[50]}],"sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  } div_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'div_t' type. The declaration from system header files should be used instead.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[63]}],"prevLine":"    int rem;","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  } ldiv_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ldiv_t' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[68]}],"prevLine":"    long rem;","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  } _LDOUBLE;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_LDOUBLE' type. The declaration from system header files should be used instead.","nextLine":"#pragma pack()","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[77]}],"prevLine":"    unsigned char ld[10];","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  } _LONGDOUBLE;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_LONGDOUBLE' type. The declaration from system header files should be used instead.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[95]}],"prevLine":"    long double x;","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  } _LDBL12;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_LDBL12' type. The declaration from system header files should be used instead.","nextLine":"#pragma pack()","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[102]}],"prevLine":"    unsigned char ld12[12];","sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  typedef void (__cdecl *_purecall_handler)(void);","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_purecall_handler' type. The declaration from system header files should be used instead.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[143]}],"sastId":"CERT-DCL37-C"}
{"code":"V677","currLine":"  } _HEAPINFO;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard '_HEAPINFO' type. The declaration from system header files should be used instead.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\malloc.h","lines":[50]}],"prevLine":"    int _useflag;","sastId":"CERT-DCL37-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\std_abs.h","lines":[48]}],"prevLine":"{","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\cstdlib","lines":[127]}],"prevLine":"{","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\charconv.h","lines":[40]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[4111]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[4392]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.tcc","lines":[46]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V565","currLine":"   { /* swallow the exception */ }","cwe":544,"falseAlarm":false,"level":3,"message":"An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.tcc","lines":[389]}],"prevLine":" catch (...)","sastId":"CERT-ERR56-CPP"}
{"code":"V797","currLine":"       if (traits_type::find(__s, __n, _M_data()[__size]))","cwe":253,"falseAlarm":false,"level":1,"message":"The 'find' function is used as if it returned a bool type. The return value of the function should probably be compared with std::string::npos.","nextLine":"  return __size;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.tcc","lines":[740]}],"prevLine":"     {","sastId":"CERT-EXP12-C"}
{"code":"V797","currLine":" if (!traits_type::find(__s, __n, _M_data()[__pos]))","cwe":253,"falseAlarm":false,"level":1,"message":"The 'find' function is used as if it returned a bool type. The return value of the function should probably be compared with std::string::npos.","nextLine":"   return __pos;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.tcc","lines":[757]}],"prevLine":"      for (; __pos < this->size(); ++__pos)","sastId":"CERT-EXP12-C"}
{"code":"V797","currLine":"       if (!traits_type::find(__s, __n, _M_data()[__size]))","cwe":253,"falseAlarm":false,"level":1,"message":"The 'find' function is used as if it returned a bool type. The return value of the function should probably be compared with std::string::npos.","nextLine":"  return __size;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.tcc","lines":[789]}],"prevLine":"     {","sastId":"CERT-EXP12-C"}
{"code":"V807","currLine":"       __int_type __c = ___in.rdbuf()->sgetc();","falseAlarm":false,"level":3,"message":"Decreased performance. Consider creating a pointer to avoid using the '___in.rdbuf()' expression repeatedly.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.tcc","lines":[915,923,931]}],"prevLine":"       const __int_type __eof = _Traits::eof();"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\cstddef","lines":[63]}],"prevLine":"#if __cplusplus >= 201703L","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\uses_allocator.h","lines":[35]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V659","currLine":"      empty() const","falseAlarm":false,"level":3,"message":"Declarations of functions with 'empty' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 96, 114.","nextLine":"      noexcept(noexcept(ranges::size(_M_derived()) == 0))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_util.h","lines":[114,96]}],"prevLine":"      constexpr bool"}
{"code":"V659","currLine":"      empty() const","falseAlarm":false,"level":3,"message":"Declarations of functions with 'empty' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 102, 108.","nextLine":"      noexcept(noexcept(_S_empty(_M_derived())))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_util.h","lines":[108,102]}],"prevLine":"      constexpr bool"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_util.h","lines":[38]}],"prevLine":"#ifdef __cpp_lib_ranges","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tuple","lines":[48]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\uses_allocator_args.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\memory_resource.h","lines":[50]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\string","lines":[79]}],"prevLine":"#if __cplusplus > 201703L","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_classes.h","lines":[43]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V565","currLine":"     { }","cwe":544,"falseAlarm":false,"level":3,"message":"An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing.","nextLine":" }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_classes.h","lines":[466]}],"prevLine":"   __catch(...)","sastId":"CERT-ERR56-CPP"}
{"code":"V832","currLine":"    id() { }","falseAlarm":false,"level":1,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_classes.h","lines":[524]}],"prevLine":"    /// Constructor."}
{"code":"V565","currLine":"     { }","cwe":544,"falseAlarm":false,"level":3,"message":"An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing.","nextLine":" }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_classes.h","lines":[584]}],"prevLine":"   __catch(...)","sastId":"CERT-ERR56-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~collate_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_classes.h","lines":[862]}],"prevLine":"    protected:"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_classes.tcc","lines":[39]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\error_constants.h","lines":[36]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\stdexcept","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\system_error","lines":[48]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ios_base.h","lines":[49]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\streambuf","lines":[47]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~basic_streambuf()","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\streambuf","lines":[203]}],"prevLine":"      /// Destructor deallocates no buffer space."}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\streambuf.tcc","lines":[39]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V677","currLine":"  typedef wchar_t wctrans_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'wctrans_t' type. The declaration from system header files should be used instead.","nextLine":"  wint_t __cdecl towctrans(wint_t,wctrans_t);","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[176]}],"sastId":"CERT-DCL37-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\ctype_base.h","lines":[37]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\streambuf_iterator.h","lines":[39]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.h","lines":[50]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~__ctype_abstract_base() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.h","lines":[364]}]}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~ctype_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.h","lines":[1501]}],"prevLine":"    protected:"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\ctype_inline.h","lines":[37]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.h","lines":[1548]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~numpunct_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.h","lines":[1938]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual ~num_get() { }","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.h","lines":[2153]}],"prevLine":"      /// Destructor."}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~num_put() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.h","lines":[2517]}],"prevLine":"      /// Destructor."}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets.tcc","lines":[35]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_ios.h","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V667","currLine":"   __throw_exception_again;","cwe":480,"falseAlarm":false,"level":3,"message":"The 'throw' operator does not possess any arguments and is not situated within the 'catch' block.","nextLine":"      }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_ios.h","lines":[170]}],"prevLine":" if (this->exceptions() & __state)","sastId":"CERT-ERR50-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~basic_ios() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_ios.h","lines":[281]}],"prevLine":"      */"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_ios.tcc","lines":[35]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~basic_ostream() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\ostream","lines":[94]}],"prevLine":"      */"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\ostream","lines":[43]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ostream.tcc","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V808","currLine":"      sentry __cerb(*this);","falseAlarm":false,"level":1,"message":"'__cerb' object of 'sentry' type was created but was not utilized.","nextLine":"      pos_type __ret = pos_type(-1);","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ostream.tcc","lines":[259]}],"prevLine":"    {"}
{"code":"V808","currLine":"      sentry __cerb(*this);","falseAlarm":false,"level":1,"message":"'__cerb' object of 'sentry' type was created but was not utilized.","nextLine":"      if (!this->fail())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ostream.tcc","lines":[271]}],"prevLine":"    {"}
{"code":"V808","currLine":"      sentry __cerb(*this);","falseAlarm":false,"level":1,"message":"'__cerb' object of 'sentry' type was created but was not utilized.","nextLine":"      if (!this->fail())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ostream.tcc","lines":[290]}],"prevLine":"    {"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\istream","lines":[43]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~basic_iostream() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\istream","lines":[1011]}],"prevLine":"      */"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\istream.tcc","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\iostream","lines":[44]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\cmath","lines":[81]}],"prevLine":"{","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\limits","lines":[158]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V560","currLine":" = has_infinity && has_quiet_NaN && has_denorm == denorm_present;","cwe":571,"falseAlarm":false,"level":2,"message":"A part of conditional expression is always true: has_denorm == denorm_present.","nextLine":"      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\limits","lines":[1728]}],"prevLine":"      static _GLIBCXX_USE_CONSTEXPR bool is_iec559"}
{"code":"V560","currLine":" = has_infinity && has_quiet_NaN && has_denorm == denorm_present;","cwe":571,"falseAlarm":false,"level":2,"message":"A part of conditional expression is always true: has_denorm == denorm_present.","nextLine":"      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\limits","lines":[1803]}],"prevLine":"      static _GLIBCXX_USE_CONSTEXPR bool is_iec559"}
{"code":"V560","currLine":" = has_infinity && has_quiet_NaN && has_denorm == denorm_present;","cwe":571,"falseAlarm":false,"level":2,"message":"A part of conditional expression is always true: has_denorm == denorm_present.","nextLine":"      static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\limits","lines":[1878]}],"prevLine":"      static _GLIBCXX_USE_CONSTEXPR bool is_iec559"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\special_function_util.h","lines":[39]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\gamma.tcc","lines":[51]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\bessel_function.tcc","lines":[55]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\beta_function.tcc","lines":[49]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\ell_integral.tcc","lines":[45]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V525","currLine":"          const _Tp __c0 = _Tp(1) / _Tp(4);","cwe":682,"falseAlarm":false,"level":3,"message":"The code contains the collection of similar blocks. Check items '1', '1', '1', '3', '1' in lines 91, 92, 93, 94, 95.","nextLine":"          const _Tp __c1 = _Tp(1) / _Tp(24);","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\ell_integral.tcc","lines":[91,92,93,94,95]}],"prevLine":"        {"}
{"code":"V525","currLine":"          const _Tp __c0 = _Tp(1) / _Tp(4);","cwe":682,"falseAlarm":false,"level":3,"message":"The code contains the collection of similar blocks. Check items '1', '3', '1', '3', '3' in lines 577, 578, 579, 580, 581.","nextLine":"          const _Tp __c1 = _Tp(3) / _Tp(14);","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\ell_integral.tcc","lines":[577,578,579,580,581]}],"prevLine":"        {"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\exp_integral.tcc","lines":[50]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\hypergeometric.tcc","lines":[44]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V519","currLine":"          __Anm3 = __Anm2;","cwe":563,"falseAlarm":false,"level":2,"message":"The '__Anm3' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 183, 203.","nextLine":"          __Anm2 = __Anm1;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\hypergeometric.tcc","lines":[203,183]}],"prevLine":"          __Bnm1 = __Bn;","sastId":"CERT-MSC13-C"}
{"code":"V519","currLine":"          __Bnm3 = __Bnm2;","cwe":563,"falseAlarm":false,"level":2,"message":"The '__Bnm3' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 184, 200.","nextLine":"          __Bnm2 = __Bnm1;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\hypergeometric.tcc","lines":[200,184]}],"prevLine":"          ++__n;","sastId":"CERT-MSC13-C"}
{"code":"V519","currLine":"          __Anm3 = __Anm2;","cwe":563,"falseAlarm":false,"level":2,"message":"The '__Anm3' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 375, 395.","nextLine":"          __Anm2 = __Anm1;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\hypergeometric.tcc","lines":[395,375]}],"prevLine":"          __Bnm1 = __Bn;","sastId":"CERT-MSC13-C"}
{"code":"V519","currLine":"          __Bnm3 = __Bnm2;","cwe":563,"falseAlarm":false,"level":2,"message":"The '__Bnm3' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 376, 392.","nextLine":"          __Bnm2 = __Bnm1;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\hypergeometric.tcc","lines":[392,376]}],"prevLine":"          ++__n;","sastId":"CERT-MSC13-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\legendre_function.tcc","lines":[49]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V547","currLine":"          if (__m > 0)","cwe":571,"falseAlarm":false,"level":2,"message":"Expression '__m > 0' is always true.","nextLine":"            {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\legendre_function.tcc","lines":[151]}],"prevLine":"          _Tp __p_mm = _Tp(1);"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\modified_bessel_func.tcc","lines":[51]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\poly_hermite.tcc","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\poly_laguerre.tcc","lines":[44]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\riemann_zeta.tcc","lines":[47]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V547","currLine":"          if (__glob)","cwe":571,"falseAlarm":false,"level":2,"message":"Expression '__glob' is always true.","nextLine":"            return __riemann_zeta_glob(__s);","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\tr1\\riemann_zeta.tcc","lines":[318]}],"prevLine":"          bool __glob = true;"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\specfun.h","lines":[59]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_uninitialized.h","lines":[70]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V690","currLine":"      struct _Vector_impl_data","falseAlarm":false,"level":3,"message":"The '_Vector_impl_data' class implements a move constructor, but lacks the move assignment operator. It is dangerous to use such a class.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_vector.h","lines":[92]}]}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_vector.h","lines":[78]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[64]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V690","currLine":"  struct _Bit_reference","falseAlarm":false,"level":2,"message":"The '_Bit_reference' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class.","nextLine":"  {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[78]}]}
{"code":"V601","currLine":" return __cmp;","cwe":704,"falseAlarm":false,"level":2,"message":"The bool type is implicitly cast to the class type.","nextLine":"      return __x._M_offset <=> __y._M_offset;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[233]}],"prevLine":"      if (const auto __cmp = __x._M_p <=> __y._M_p; __cmp != 0)","sastId":"CERT-INT36-C"}
{"code":"V690","currLine":"      struct _Bvector_impl_data","falseAlarm":false,"level":3,"message":"The '_Bvector_impl_data' class implements a move constructor, but lacks the move assignment operator. It is dangerous to use such a class.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[501]}]}
{"code":"V769","currLine":"     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;","cwe":119,"falseAlarm":false,"level":3,"message":"The '_M_impl._M_end_addr()' pointer in the expression could be nullptr. In such case, resulting value of arithmetic operations on this pointer will be senseless and it should not be used.","nextLine":"     _Bit_alloc_traits::deallocate(_M_impl,","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[661]}],"prevLine":"   {","sastId":"CERT-EXP08-C"}
{"code":"V835","currLine":"      vector(size_type __n, const bool& __value,","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const bool& __value' with 'bool __value'.","nextLine":"      const allocator_type& __a = allocator_type())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[757]}],"prevLine":"      _GLIBCXX20_CONSTEXPR"}
{"code":"V832","currLine":"      ~vector() _GLIBCXX_NOEXCEPT { }","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[851]}],"prevLine":"      _GLIBCXX20_CONSTEXPR"}
{"code":"V835","currLine":"      assign(size_type __n, const bool& __x)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const bool& __x' with 'bool __x'.","nextLine":"      { _M_fill_assign(__n, __x); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[926]}],"prevLine":"      void"}
{"code":"V835","currLine":"      insert(const_iterator __position, const bool& __x)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the second argument 'const bool& __x' with 'bool __x'.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[1150]}],"prevLine":"#if __cplusplus >= 201103L"}
{"code":"V835","currLine":"      insert(const_iterator __position, size_type __n, const bool& __x)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the third argument 'const bool& __x' with 'bool __x'.","nextLine":"      {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[1200]}],"prevLine":"      iterator"}
{"code":"V769","currLine":"   __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);","cwe":119,"falseAlarm":false,"level":3,"message":"The 'this->_M_impl._M_end_addr()' pointer in the 'this->_M_impl._M_end_addr() - __p' expression could be nullptr. In such case, resulting value will be senseless and it should not be used.","nextLine":"      }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[1327]}],"prevLine":" if (_Bit_type* __p = this->_M_impl._M_start._M_p)","sastId":"CERT-EXP08-C"}
{"code":"V835","currLine":"     _GLIBCXX_STD_C::_Bit_iterator __last, const bool& __x)","falseAlarm":false,"level":3,"message":"Passing cheap-to-copy argument by reference may lead to decreased performance. To avoid this, replace the third argument 'const bool& __x' with 'bool __x'.","nextLine":"  {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_bvector.h","lines":[1565]}],"prevLine":"  __fill_a1(_GLIBCXX_STD_C::_Bit_iterator __first,"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\vector.tcc","lines":[59]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V783","currLine":"   iterator __finish = std::copy(__position, end(), __i);","cwe":119,"falseAlarm":false,"level":3,"message":"Dereferencing of the invalid iterator '__i' might take place.","nextLine":"   this->_M_deallocate();","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\vector.tcc","lines":[947]}],"prevLine":"   *__i++ = __x;","sastId":"CERT-CTR51-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\vector.tcc","lines":[1009]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\vector","lines":[100]}],"prevLine":"#if __cplusplus > 201703L","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\uniform_int_dist.h","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[37]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V550","currLine":"      { return __p1._M_p == __p2._M_p; }","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __p1._M_p == __p2._M_p. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[3589]}],"prevLine":"      operator==(const param_type& __p1, const param_type& __p2)","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __p1._M_p == __p2._M_p. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[3821]}],"prevLine":" operator==(const param_type& __p1, const param_type& __p2)","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" { return (__p1._M_mean == __p2._M_mean","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of normal_distribution < double >: An odd precise comparison: __p1._M_mean == __p2._M_mean. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"    && __p1._M_stddev == __p2._M_stddev); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[2022]}],"prevLine":" operator==(const param_type& __p1, const param_type& __p2)","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"    && __p1._M_stddev == __p2._M_stddev); }","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of normal_distribution < double >: An odd precise comparison: __p1._M_stddev == __p2._M_stddev. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[2023]}],"prevLine":" { return (__p1._M_mean == __p2._M_mean","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" { return __p1._M_p == __p2._M_p; }","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __p1._M_p == __p2._M_p. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[4058]}],"prevLine":" operator==(const param_type& __p1, const param_type& __p2)","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __p1._M_p == __p2._M_p. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[4274]}],"prevLine":" operator==(const param_type& __p1, const param_type& __p2)","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" { return (__p1._M_alpha == __p2._M_alpha","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of gamma_distribution < double >: An odd precise comparison: __p1._M_alpha == __p2._M_alpha. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"    && __p1._M_beta == __p2._M_beta); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[2462]}],"prevLine":" operator==(const param_type& __p1, const param_type& __p2)","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"    && __p1._M_beta == __p2._M_beta); }","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of gamma_distribution < double >: An odd precise comparison: __p1._M_beta == __p2._M_beta. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[2463]}],"prevLine":" { return (__p1._M_alpha == __p2._M_alpha","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" { return __p1._M_mean == __p2._M_mean; }","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __p1._M_mean == __p2._M_mean. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[4506]}],"prevLine":" operator==(const param_type& __p1, const param_type& __p2)","sastId":"CERT-FLP02-C"}
{"code":"V573","currLine":"  __m128 __Y = __Y;","cwe":457,"falseAlarm":false,"level":3,"message":"Uninitialized variable '__Y' was used. The variable was used to initialize itself.","nextLine":"#pragma GCC diagnostic pop","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\xmmintrin.h","lines":[121]}],"prevLine":"#pragma GCC diagnostic ignored \"-Winit-self\"","sastId":"CERT-EXP53-CPP"}
{"code":"V573","currLine":"  __m128d __Y = __Y;","cwe":457,"falseAlarm":false,"level":3,"message":"Uninitialized variable '__Y' was used. The variable was used to initialize itself.","nextLine":"#pragma GCC diagnostic pop","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\emmintrin.h","lines":[104]}],"prevLine":"#pragma GCC diagnostic ignored \"-Winit-self\"","sastId":"CERT-EXP53-CPP"}
{"code":"V573","currLine":"  __m128i __Y = __Y;","cwe":457,"falseAlarm":false,"level":3,"message":"Uninitialized variable '__Y' was used. The variable was used to initialize itself.","nextLine":"#pragma GCC diagnostic pop","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\emmintrin.h","lines":[793]}],"prevLine":"#pragma GCC diagnostic ignored \"-Winit-self\"","sastId":"CERT-EXP53-CPP"}
{"code":"V550","currLine":"            while (__le == 0.0 || __le >= 1.0);","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __le == 0.0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\opt_random.h","lines":[182]}],"prevLine":"              }","sastId":"CERT-FLP02-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\opt_random.h","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_numeric.h","lines":[64]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\numeric","lines":[90]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\pstl\\glue_numeric_defs.h","lines":[15]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[35]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V614","currLine":"  __reject |= __x + __np >= __thr;","cwe":457,"falseAlarm":false,"level":2,"message":"Potentially uninitialized variable '__x' used.","nextLine":"       }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[1660]}],"sastId":"CERT-EXP53-CPP"}
{"code":"V656","currLine":"      const double __e2 = -std::log(1.0 - __aurng());","cwe":665,"falseAlarm":false,"level":2,"message":"Variables '__e1', '__e2' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the '- std::log(1.0 - __aurng())' expression. Check lines: 1628, 1629.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[1629,1628]}],"prevLine":"      const double __e1 = -std::log(1.0 - __aurng());"}
{"code":"V656","currLine":"      const double __e2 = -std::log(1.0 - __aurng());","cwe":665,"falseAlarm":false,"level":2,"message":"Variables '__e1', '__e2' are initialized through the call to the same function. It's probably an error or un-optimized code. Consider inspecting the '- std::log(1.0 - __aurng())' expression. Check lines: 1640, 1641.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[1641,1640]}],"prevLine":"      const double __e1 = -std::log(1.0 - __aurng());"}
{"code":"V550","currLine":" if (__p12 != __p)","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __p12 != __p. It's probably better to use a comparison with defined precision: fabs(A - B) > Epsilon.","nextLine":"   __ret = __t - __ret;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[1674]}],"sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":"       && _M_den[0] == _M_den[1]))","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: _M_den[0] == _M_den[1]. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":" {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[3036]}],"prevLine":"       && _M_int[1] == _RealType(1)","sastId":"CERT-FLP02-C"}
{"code":"V550","currLine":" if (__a == 0)","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison: __a == 0. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"   __x += __cm / __b;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[3146]}],"prevLine":" _RealType __x = __param._M_int[__i];","sastId":"CERT-FLP02-C"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[41]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\time_members.h","lines":[37]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[354]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~time_get() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[622]}],"prevLine":"      /// Destructor."}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~time_get_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[816]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~time_put()","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[901]}],"prevLine":"      /// Destructor."}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~time_put_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[950]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~moneypunct_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[1481]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~money_get() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[1595]}],"prevLine":"      /// Destructor."}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~money_put() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[1737]}],"prevLine":"      /// Destructor."}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~messages_byname()","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.h","lines":[2053]}],"prevLine":"    protected:"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\messages_members.h","lines":[36]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[44]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~__codecvt_abstract_base() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[229]}]}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~codecvt() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[303]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~codecvt_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[721]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~codecvt_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[740]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~codecvt_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[758]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~codecvt_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[777]}],"prevLine":"    protected:"}
{"code":"V832","currLine":"      virtual","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      ~codecvt_byname() { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\codecvt.h","lines":[795]}],"prevLine":"    protected:"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.tcc","lines":[35]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V614","currLine":"    __tp._M_am_pm_format(&__ampm_format);","cwe":824,"falseAlarm":false,"level":1,"message":"Uninitialized pointer '__ampm_format' used. Consider checking the first actual argument of the '_M_am_pm_format' function.","nextLine":"    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.tcc","lines":[854]}],"prevLine":"    const char_type*  __ampm_format;","sastId":"CERT-EXP53-CPP"}
{"code":"V522","currLine":"       if (__pos >= __matches_lengths[__i])","cwe":690,"falseAlarm":false,"level":3,"message":"There might be dereferencing of a potential null pointer '__matches_lengths'.","nextLine":"  ++__nskipped, ++__i;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_facets_nonio.tcc","lines":[1291]}],"prevLine":"       const char_type* __name = __names[__matches[__i]];","sastId":"CERT-MEM52-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_conv.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1009","currLine":" char __bytes[2] = { __byte };","cwe":665,"falseAlarm":false,"level":2,"message":"Check the array initialization. Only the first element is initialized explicitly. The rest elements are initialized with zeros.","nextLine":" return from_bytes(__bytes, __bytes+1);","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_conv.h","lines":[320]}],"prevLine":"      {"}
{"code":"V560","currLine":" if (this->gptr() < this->egptr() || (_M_buf && _M_conv_get()))","cwe":571,"falseAlarm":false,"level":2,"message":"A part of conditional expression is always true: _M_buf.","nextLine":"   return _Tr::to_int_type(*this->gptr());","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_conv.h","lines":[483]}]}
{"code":"V808","currLine":" __xfer_bufptrs __st{__rhs, this};","falseAlarm":false,"level":1,"message":"'__st' object of '__xfer_bufptrs' type was created but was not utilized.","nextLine":" const __streambuf_type& __base = __rhs;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\sstream","lines":[215]}],"prevLine":"      {"}
{"code":"V808","currLine":" __xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};","falseAlarm":false,"level":1,"message":"'__l_st' object of '__xfer_bufptrs' type was created but was not utilized.","nextLine":" __xfer_bufptrs __r_st{__rhs, this};","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\sstream","lines":[228]}],"prevLine":"      {"}
{"code":"V808","currLine":" __xfer_bufptrs __r_st{__rhs, this};","falseAlarm":false,"level":1,"message":"'__r_st' object of '__xfer_bufptrs' type was created but was not utilized.","nextLine":" __streambuf_type& __base = __rhs;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\sstream","lines":[229]}],"prevLine":" __xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\sstream","lines":[55]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V832","currLine":"      ~basic_istringstream()","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\sstream","lines":[626]}],"prevLine":"      */"}
{"code":"V832","currLine":"      ~basic_ostringstream()","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\sstream","lines":[850]}],"prevLine":"      */"}
{"code":"V832","currLine":"      ~basic_stringstream()","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"      { }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\sstream","lines":[1070]}],"prevLine":"      */"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\sstream.tcc","lines":[39]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\quoted_string.h","lines":[40]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\iomanip","lines":[51]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\algorithmfwd.h","lines":[42]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_heap.h","lines":[63]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_tempbuf.h","lines":[65]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_algo.h","lines":[77]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_algobase.h","lines":[43]}],"prevLine":"#if __cpp_lib_concepts","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std _GLIBCXX_VISIBILITY(default)","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\ranges_algo.h","lines":[43]}],"prevLine":"#if __cpp_lib_concepts","sastId":"CERT-DCL58-CPP"}
{"code":"V1061","currLine":"namespace std","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\pstl\\glue_algorithm_defs.h","lines":[17]}],"sastId":"CERT-DCL58-CPP"}
{"code":"V524","currLine":"  is_constant_evaluated() noexcept","falseAlarm":false,"level":3,"message":"It is odd that the body of 'is_constant_evaluated' function is fully equivalent to the body of '__is_constant_evaluated' function (c++config.h, line 540).","nextLine":"  {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\type_traits","lines":[3644]},{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\c++config.h","lines":[540]}],"prevLine":"  constexpr inline bool"}
{"code":"V524","currLine":"    make_reverse_iterator(_Iterator __i)","falseAlarm":false,"level":3,"message":"It is odd that the body of 'make_reverse_iterator' function is fully equivalent to the body of '__make_reverse_iterator' function.","nextLine":"    { return reverse_iterator<_Iterator>(__i); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[654,642]}],"prevLine":"    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>"}
{"code":"V524","currLine":"  fabs(float __x)","falseAlarm":false,"level":3,"message":"It is odd that the body of 'fabs' function is fully equivalent to the body of 'abs' function (std_abs.h, line 75).","nextLine":"  { return __builtin_fabsf(__x); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\cmath","lines":[243]},{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\std_abs.h","lines":[75]}],"prevLine":"  inline _GLIBCXX_CONSTEXPR float"}
{"code":"V524","currLine":"  fabs(long double __x)","falseAlarm":false,"level":3,"message":"It is odd that the body of 'fabs' function is fully equivalent to the body of 'abs' function (std_abs.h, line 79).","nextLine":"  { return __builtin_fabsl(__x); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\cmath","lines":[247]},{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\std_abs.h","lines":[79]}],"prevLine":"  inline _GLIBCXX_CONSTEXPR long double"}
{"code":"V524","currLine":"      overflow(int_type __c _IsUnused  = traits_type::eof())","falseAlarm":false,"level":3,"message":"It is odd that the body of 'overflow' function is fully equivalent to the body of 'pbackfail' function.","nextLine":"      { return traits_type::eof(); }","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\streambuf","lines":[775,731]}],"prevLine":"      virtual int_type"}
{"code":"V524","currLine":"_mm_cvtss_si64x (__m128 __A)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_cvtss_si64x' function is fully equivalent to the body of '_mm_cvtss_si64' function.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\xmmintrin.h","lines":[543,536]}],"prevLine":"extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"_mm_cvttss_si64x (__m128 __A)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_cvttss_si64x' function is fully equivalent to the body of '_mm_cvttss_si64' function.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\xmmintrin.h","lines":[588,581]}],"prevLine":"extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"_mm_cvtsi64x_ss (__m128 __A, long long __B)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_cvtsi64x_ss' function is fully equivalent to the body of '_mm_cvtsi64_ss' function.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\xmmintrin.h","lines":[633,626]}],"prevLine":"extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"_mm_loaddup_pd (double const *__P)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_loaddup_pd' function is fully equivalent to the body of '_mm_load_pd1' function (emmintrin.h, line 152).","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\pmmintrin.h","lines":[99]},{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\emmintrin.h","lines":[152]}],"prevLine":"extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"_mm_cvtsd_si64x (__m128d __A)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_cvtsd_si64x' function is fully equivalent to the body of '_mm_cvtsd_si64' function.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\emmintrin.h","lines":[887,880]}],"prevLine":"extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"_mm_cvttsd_si64x (__m128d __A)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_cvttsd_si64x' function is fully equivalent to the body of '_mm_cvttsd_si64' function.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\emmintrin.h","lines":[909,902]}],"prevLine":"extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"_mm_cvtsi64x_sd (__m128d __A, long long __B)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_cvtsi64x_sd' function is fully equivalent to the body of '_mm_cvtsi64_sd' function.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\emmintrin.h","lines":[937,930]}],"prevLine":"extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"_mm_cvtsi64x_si128 (long long __A)","falseAlarm":false,"level":3,"message":"It is odd that the body of '_mm_cvtsi64x_si128' function is fully equivalent to the body of '_mm_cvtsi64_si128' function.","nextLine":"{","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\emmintrin.h","lines":[1559,1552]}],"prevLine":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}
{"code":"V524","currLine":"    __allow_vector()","falseAlarm":false,"level":3,"message":"It is odd that the body of '__allow_vector' function is fully equivalent to the body of '__allow_unsequenced' function.","nextLine":"    {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\pstl\\execution_defs.h","lines":[55,50]}],"prevLine":"    static constexpr std::false_type"}
{"code":"V524","currLine":"    __allow_vector()","falseAlarm":false,"level":3,"message":"It is odd that the body of '__allow_vector' function is fully equivalent to the body of '__allow_unsequenced' function.","nextLine":"    {","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\pstl\\execution_defs.h","lines":[98,93]}],"prevLine":"    static constexpr std::true_type"}
{"code":"V524","currLine":"void RandomPlayer::get_move_2 (int& x , int& y) {","falseAlarm":false,"level":3,"message":"It is odd that the body of 'get_move_2' function is fully equivalent to the body of 'get_move' function.","nextLine":"    x = (int) (rand()/(RAND_MAX + 1.0) * dimension);","positions":[{"file":"C:\\Users\\Tag\\CS213-A3-ObjectOrientedProgramming\\Gm2.cpp","lines":[397,17]}],"prevLine":"}"}
{"code":"V524","currLine":"bool gm_3 :: game_is_over(){","falseAlarm":false,"level":3,"message":"It is odd that the body of 'game_is_over' function is fully equivalent to the body of 'is_draw' function.","nextLine":"    return (n_moves == 24 );","positions":[{"file":"C:\\Users\\Tag\\CS213-A3-ObjectOrientedProgramming\\Gm2.cpp","lines":[91,88]}],"prevLine":"}"}
{"code":"V730","currLine":"    common_iterator()","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_index.","nextLine":"    noexcept(is_nothrow_default_constructible_v<_It>)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1907]}],"prevLine":"    constexpr","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"    common_iterator(const common_iterator& __x)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_index.","nextLine":"    noexcept(_S_noexcept<const _It&, const _Sent&>())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1953]}],"prevLine":"    constexpr","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"    common_iterator(common_iterator&& __x)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_index.","nextLine":"    noexcept(_S_noexcept<_It, _Sent>())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_iterator.h","lines":[1977]}],"prevLine":"    constexpr","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      pointer_to_unary_function() { }","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_ptr.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_function.h","lines":[1111]}],"prevLine":"    public:","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      pointer_to_binary_function() { }","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_ptr.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_function.h","lines":[1138]}],"prevLine":"    public:","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      basic_string(const basic_string& __str)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_string_length.","nextLine":"      : _M_dataplus(_M_local_data(),","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[548]}],"prevLine":"      _GLIBCXX20_CONSTEXPR","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      basic_string(const basic_string& __str, size_type __pos,","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_string_length.","nextLine":"     const _Alloc& __a = _Alloc())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[565]}],"prevLine":"      _GLIBCXX20_CONSTEXPR","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      basic_string(const basic_string& __str, size_type __pos,","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_string_length.","nextLine":"     size_type __n)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[582]}],"prevLine":"      _GLIBCXX20_CONSTEXPR","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      basic_string(const basic_string& __str, size_type __pos,","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_string_length.","nextLine":"     size_type __n, const _Alloc& __a)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[600]}],"prevLine":"      _GLIBCXX20_CONSTEXPR","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      basic_string(const _CharT* __s, size_type __n,","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_string_length.","nextLine":"     const _Alloc& __a = _Alloc())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[620]}],"prevLine":"      _GLIBCXX20_CONSTEXPR","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_string_length.","nextLine":"      : _M_dataplus(_M_local_data(), __a)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[706]}],"prevLine":"      _GLIBCXX20_CONSTEXPR","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      basic_string(const basic_string& __str, const _Alloc& __a)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_string_length.","nextLine":"      : _M_dataplus(_M_local_data(), __a)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[711]}],"prevLine":"      _GLIBCXX20_CONSTEXPR","sastId":"CERT-EXP53-CPP"}
{"code":"V1077","currLine":"      basic_string(basic_string&& __str, const _Alloc& __a)","cwe":457,"falseAlarm":false,"level":2,"message":"The 'basic_string' constructor contains potentially uninitialized members. Inspect the following: _M_string_length.","nextLine":"      noexcept(_Alloc_traits::_S_always_equal())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\basic_string.h","lines":[716,229]}],"prevLine":"      _GLIBCXX20_CONSTEXPR"}
{"code":"V730","currLine":"    id() { }","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_index.","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_classes.h","lines":[524]}],"prevLine":"    /// Constructor.","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      explicit","cwe":457,"falseAlarm":false,"level":3,"message":"It is possible that not all members of a class are initialized inside the constructor. Consider inspecting: _M_x.","nextLine":"      linear_congruential_engine(result_type __s)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[299]}],"prevLine":"       */","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      explicit","cwe":457,"falseAlarm":false,"level":3,"message":"It is possible that not all members of a class are initialized inside the constructor. Consider inspecting: _M_p, _M_x.","nextLine":"      mersenne_twister_engine(result_type __sd)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[538]}],"sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      explicit","cwe":457,"falseAlarm":false,"level":3,"message":"It is possible that not all members of a class are initialized inside the constructor. Consider inspecting: _M_p, _M_x, _M_carry.","nextLine":"      subtract_with_carry_engine(result_type __sd)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[733]}],"prevLine":"       */","sastId":"CERT-EXP53-CPP"}
{"code":"V1077","currLine":" explicit","cwe":457,"falseAlarm":false,"level":3,"message":"The 'param_type' constructor contains potentially uninitialized members. Inspect the following: _M_d1, _M_d2, _M_s1, _M_s2, _M_c, _M_a1, _M_a123, ....","nextLine":" param_type(_IntType __t, double __p = 0.5)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[3801]},{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[1494,1498,1502,1503,1504,1505,1508,1512,1514,1516]}]}
{"code":"V1077","currLine":" explicit","cwe":457,"falseAlarm":false,"level":3,"message":"The 'param_type' constructor contains potentially uninitialized members. Inspect the following: _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb, ....","nextLine":" param_type(double __mean)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.h","lines":[4492]},{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\random.tcc","lines":[1275,1276,1281,1283,1284,1286,1287]}]}
{"code":"V730","currLine":"     messages<_CharT>::messages(size_t __refs)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_name_messages.","nextLine":"     : facet(__refs)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\messages_members.h","lines":[42]}],"prevLine":"  template<typename _CharT>","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"     messages<_CharT>::messages(__c_locale, const char*, size_t __refs)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_name_messages.","nextLine":"     : facet(__refs)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\x86_64-w64-mingw32\\bits\\messages_members.h","lines":[47]}],"prevLine":"  template<typename _CharT>","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"      explicit","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: _M_get_buf.","nextLine":"      wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt = new _Codecvt,","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\locale_conv.h","lines":[427]}],"prevLine":"       */","sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"class Board {","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the compiler generated constructor. Consider inspecting: n_rows, n_cols, board.","nextLine":"protected:","positions":[{"file":"C:\\Users\\Tag\\CS213-A3-ObjectOrientedProgramming\\Gm2.h","lines":[7]}],"sastId":"CERT-EXP53-CPP"}
{"code":"V1042","currLine":"// terms of the GNU General Public License as published by the","cwe":1177,"falseAlarm":false,"level":1,"message":"This file is marked with copyleft license, which requires you to open the derived source code.","nextLine":"// Free Software Foundation; either version 3, or (at your option)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\iostream","lines":[7]}],"prevLine":"// software; you can redistribute it and/or modify it under the"}
{"code":"V1059","currLine":"#define iswalpha(_c) (iswctype(_c,_ALPHA))","falseAlarm":false,"level":3,"message":"The 'iswalpha' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[364]}],"prevLine":"#if !defined(__cplusplus) || defined(_CRT_WCTYPE_NOINLINE)","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","falseAlarm":false,"level":3,"message":"The 'iswupper' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[365]}],"prevLine":"#define iswalpha(_c) (iswctype(_c,_ALPHA))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","falseAlarm":false,"level":3,"message":"The 'iswlower' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[366]}],"prevLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswdigit' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[367]}],"prevLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","falseAlarm":false,"level":3,"message":"The 'iswxdigit' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[368]}],"prevLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","falseAlarm":false,"level":3,"message":"The 'iswspace' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[369]}],"prevLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","falseAlarm":false,"level":3,"message":"The 'iswpunct' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[370]}],"prevLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswalnum' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[371]}],"prevLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswprint' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[372]}],"prevLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswgraph' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswcntrl(_c) (iswctype(_c,_CONTROL))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[373]}],"prevLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswcntrl(_c) (iswctype(_c,_CONTROL))","falseAlarm":false,"level":3,"message":"The 'iswcntrl' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswascii(_c) ((unsigned)(_c) < 0x80)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[374]}],"prevLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define getwchar() fgetwc(stdin)","falseAlarm":false,"level":3,"message":"The 'getwchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define putwchar(_c) fputwc((_c),stdout)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[1235]}],"prevLine":"#if !defined(__cplusplus) || defined(_CRT_GETPUTWCHAR_NOINLINE) || defined (__CRT__NO_INLINE)","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putwchar(_c) fputwc((_c),stdout)","falseAlarm":false,"level":3,"message":"The 'putwchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[1236]}],"prevLine":"#define getwchar() fgetwc(stdin)","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define getwc(_stm) fgetwc(_stm)","falseAlarm":false,"level":3,"message":"The 'getwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define putwc(_c,_stm) fputwc(_c,_stm)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[1242]}],"sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putwc(_c,_stm) fputwc(_c,_stm)","falseAlarm":false,"level":3,"message":"The 'putwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#if __MSVCRT_VERSION__ >= 0x800","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wchar.h","lines":[1243]}],"prevLine":"#define getwc(_stm) fgetwc(_stm)","sastId":"CERT-DCL51-CPP"}
{"code":"V1003","currLine":"#  define __MINGW_MSC_PREREQ(major, minor) \\","falseAlarm":false,"level":3,"message":"The macro '__MINGW_MSC_PREREQ' is a dangerous expression. The parameters 'major', 'minor' must be surrounded by parentheses.","nextLine":"      (_MSC_VER >= (major * 100 + minor * 10))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\_mingw_mac.h","lines":[232]}],"prevLine":"#if defined (_MSC_VER)"}
{"code":"V1059","currLine":"#define swprintf __mingw_swprintf","falseAlarm":false,"level":3,"message":"The 'swprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define vswprintf __mingw_vswprintf","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\swprintf.inl","lines":[78]}],"prevLine":"#if __USE_MINGW_ANSI_STDIO","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define vswprintf __mingw_vswprintf","falseAlarm":false,"level":3,"message":"The 'vswprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\swprintf.inl","lines":[79]}],"prevLine":"#define swprintf __mingw_swprintf","sastId":"CERT-DCL51-CPP"}
{"code":"V1003","currLine":"# define __glibcxx_requires_non_empty_range(_First,_Last) \\","falseAlarm":false,"level":3,"message":"The macro '__glibcxx_requires_non_empty_range' is a dangerous expression. The parameters '_First', '_Last' must be surrounded by parentheses.","nextLine":"  __glibcxx_assert(_First != _Last)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\debug\\assertions.h","lines":[41]}],"prevLine":"// Verify that [_First, _Last) forms a non-empty iterator range."}
{"code":"V1003","currLine":"# define __glibcxx_requires_subscript(_N) \\","falseAlarm":false,"level":3,"message":"The macro '__glibcxx_requires_subscript' is a dangerous expression. The parameter '_N' must be surrounded by parentheses.","nextLine":"  __glibcxx_assert(_N < this->size())","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\debug\\assertions.h","lines":[43]}],"prevLine":"  __glibcxx_assert(_First != _Last)"}
{"code":"V1059","currLine":"#define getwchar() fgetwc(stdin)","falseAlarm":false,"level":3,"message":"The 'getwchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define putwchar(_c) fputwc((_c),stdout)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdio.h","lines":[1491]}],"prevLine":"#if !defined(__cplusplus) || defined(_CRT_GETPUTWCHAR_NOINLINE) || defined (__CRT__NO_INLINE)","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putwchar(_c) fputwc((_c),stdout)","falseAlarm":false,"level":3,"message":"The 'putwchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#else","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdio.h","lines":[1492]}],"prevLine":"#define getwchar() fgetwc(stdin)","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define getwc(_stm) fgetwc(_stm)","falseAlarm":false,"level":3,"message":"The 'getwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define putwc(_c,_stm) fputwc(_c,_stm)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdio.h","lines":[1498]}],"sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putwc(_c,_stm) fputwc(_c,_stm)","falseAlarm":false,"level":3,"message":"The 'putwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#if __MSVCRT_VERSION__ >= 0x800","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdio.h","lines":[1499]}],"prevLine":"#define getwc(_stm) fgetwc(_stm)","sastId":"CERT-DCL51-CPP"}
{"code":"V1003","currLine":"#define _chvalidchk_l(_Char,_Flag,_Locale) (!_Locale ? __chvalidchk(_Char,_Flag) : ((_locale_t)_Locale)->locinfo->_locale_pctype[(unsigned char)(_Char)] & (_Flag))","falseAlarm":false,"level":3,"message":"The macro '_chvalidchk_l' is a dangerous expression. The parameter '_Locale' must be surrounded by parentheses.","nextLine":"#define _ischartype_l(_Char,_Flag,_Locale) (((_Locale)!=NULL && (((_locale_t)(_Locale))->locinfo->_locale_mb_cur_max) > 1) ? _isctype_l(_Char,(_Flag),_Locale) : _chvalidchk_l(_Char,_Flag,_Locale))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[219]}],"prevLine":"#ifdef _UCRT"}
{"code":"V1003","currLine":"#define _chvalidchk_l(_Char,_Flag,_Locale) (!_Locale ? __chvalidchk(_Char,_Flag) : ((_locale_t)_Locale)->locinfo->pctype[(unsigned char)(_Char)] & (_Flag))","falseAlarm":false,"level":3,"message":"The macro '_chvalidchk_l' is a dangerous expression. The parameter '_Locale' must be surrounded by parentheses.","nextLine":"#define _ischartype_l(_Char,_Flag,_Locale) (((_Locale)!=NULL && (((_locale_t)(_Locale))->locinfo->mb_cur_max) > 1) ? _isctype_l(_Char,(_Flag),_Locale) : _chvalidchk_l(_Char,_Flag,_Locale))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[222]}],"prevLine":"#else"}
{"code":"V1059","currLine":"#define iswalpha(_c) (iswctype(_c,_ALPHA))","falseAlarm":false,"level":3,"message":"The 'iswalpha' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[246]}],"prevLine":"#ifndef __cplusplus","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","falseAlarm":false,"level":3,"message":"The 'iswupper' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[247]}],"prevLine":"#define iswalpha(_c) (iswctype(_c,_ALPHA))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","falseAlarm":false,"level":3,"message":"The 'iswlower' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[248]}],"prevLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswdigit' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[249]}],"prevLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","falseAlarm":false,"level":3,"message":"The 'iswxdigit' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[250]}],"prevLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","falseAlarm":false,"level":3,"message":"The 'iswspace' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[251]}],"prevLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","falseAlarm":false,"level":3,"message":"The 'iswpunct' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[252]}],"prevLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswalnum' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[253]}],"prevLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswprint' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[254]}],"prevLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswgraph' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswcntrl(_c) (iswctype(_c,_CONTROL))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[255]}],"prevLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswcntrl(_c) (iswctype(_c,_CONTROL))","falseAlarm":false,"level":3,"message":"The 'iswcntrl' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswascii(_c) ((unsigned)(_c) < 0x80)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\ctype.h","lines":[256]}],"prevLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define system(...) (pthread_testcancel(), system(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'system' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define access(...) (pthread_testcancel(), access(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[485]}],"prevLine":"//#define Sleep(...) (pthread_testcancel(), Sleep(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define asctime(...) (pthread_testcancel(), asctime(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'asctime' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define catclose(...) (pthread_testcancel(), catclose(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[487]}],"prevLine":"#define access(...) (pthread_testcancel(), access(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define ctime(...) (pthread_testcancel(), ctime(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'ctime' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define dbm_close(...) (pthread_testcancel(), dbm_close(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[494]}],"prevLine":"#define ctermid(...) (pthread_testcancel(), ctermid(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fclose(...) (pthread_testcancel(), fclose(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fclose' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fflush(...) (pthread_testcancel(), fflush(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[510]}],"prevLine":"#define endutxent(...) (pthread_testcancel(), endutxent(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fflush(...) (pthread_testcancel(), fflush(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fflush' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fgetc(...) (pthread_testcancel(), fgetc(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[511]}],"prevLine":"#define fclose(...) (pthread_testcancel(), fclose(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fgetc(...) (pthread_testcancel(), fgetc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fgetc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fgetpos(...) (pthread_testcancel(), fgetpos(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[512]}],"prevLine":"#define fflush(...) (pthread_testcancel(), fflush(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fgetpos(...) (pthread_testcancel(), fgetpos(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fgetpos' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fgets(...) (pthread_testcancel(), fgets(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[513]}],"prevLine":"#define fgetc(...) (pthread_testcancel(), fgetc(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fgets(...) (pthread_testcancel(), fgets(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fgets' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fgetwc(...) (pthread_testcancel(), fgetwc(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[514]}],"prevLine":"#define fgetpos(...) (pthread_testcancel(), fgetpos(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fgetwc(...) (pthread_testcancel(), fgetwc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fgetwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fgetws(...) (pthread_testcancel(), fgetws(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[515]}],"prevLine":"#define fgets(...) (pthread_testcancel(), fgets(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fgetws(...) (pthread_testcancel(), fgetws(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fgetws' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fmtmsg(...) (pthread_testcancel(), fmtmsg(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[516]}],"prevLine":"#define fgetwc(...) (pthread_testcancel(), fgetwc(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fopen(...) (pthread_testcancel(), fopen(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fopen' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fpathconf(...) (pthread_testcancel(), fpathconf(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[518]}],"prevLine":"#define fmtmsg(...) (pthread_testcancel(), fmtmsg(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fprintf(...) (pthread_testcancel(), fprintf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fputc(...) (pthread_testcancel(), fputc(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[520]}],"prevLine":"#define fpathconf(...) (pthread_testcancel(), fpathconf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fputc(...) (pthread_testcancel(), fputc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fputc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fputs(...) (pthread_testcancel(), fputs(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[521]}],"prevLine":"#define fprintf(...) (pthread_testcancel(), fprintf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fputs(...) (pthread_testcancel(), fputs(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fputs' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fputwc(...) (pthread_testcancel(), fputwc(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[522]}],"prevLine":"#define fputc(...) (pthread_testcancel(), fputc(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fputwc(...) (pthread_testcancel(), fputwc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fputwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fputws(...) (pthread_testcancel(), fputws(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[523]}],"prevLine":"#define fputs(...) (pthread_testcancel(), fputs(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fputws(...) (pthread_testcancel(), fputws(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fputws' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fread(...) (pthread_testcancel(), fread(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[524]}],"prevLine":"#define fputwc(...) (pthread_testcancel(), fputwc(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fread(...) (pthread_testcancel(), fread(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fread' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define freopen(...) (pthread_testcancel(), freopen(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[525]}],"prevLine":"#define fputws(...) (pthread_testcancel(), fputws(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define freopen(...) (pthread_testcancel(), freopen(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'freopen' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fscanf(...) (pthread_testcancel(), fscanf(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[526]}],"prevLine":"#define fread(...) (pthread_testcancel(), fread(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fscanf(...) (pthread_testcancel(), fscanf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fscanf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fseek(...) (pthread_testcancel(), fseek(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[527]}],"prevLine":"#define freopen(...) (pthread_testcancel(), freopen(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fseek(...) (pthread_testcancel(), fseek(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fseek' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fseeko(...) (pthread_testcancel(), fseeko(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[528]}],"prevLine":"#define fscanf(...) (pthread_testcancel(), fscanf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fsetpos(...) (pthread_testcancel(), fsetpos(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fsetpos' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fstat(...) (pthread_testcancel(), fstat(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[530]}],"prevLine":"#define fseeko(...) (pthread_testcancel(), fseeko(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define ftell(...) (pthread_testcancel(), ftell(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'ftell' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define ftello(...) (pthread_testcancel(), ftello(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[532]}],"prevLine":"#define fstat(...) (pthread_testcancel(), fstat(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fwprintf(...) (pthread_testcancel(), fwprintf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fwprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fwrite(...) (pthread_testcancel(), fwrite(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[535]}],"prevLine":"#define ftw(...) (pthread_testcancel(), ftw(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fwrite(...) (pthread_testcancel(), fwrite(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fwrite' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define fwscanf(...) (pthread_testcancel(), fwscanf(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[536]}],"prevLine":"#define fwprintf(...) (pthread_testcancel(), fwprintf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define fwscanf(...) (pthread_testcancel(), fwscanf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'fwscanf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define getaddrinfo(...) (pthread_testcancel(), getaddrinfo(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[537]}],"prevLine":"#define fwrite(...) (pthread_testcancel(), fwrite(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define getc(...) (pthread_testcancel(), getc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'getc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define getc_unlocked(...) (pthread_testcancel(), getc_unlocked(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[539]}],"prevLine":"#define getaddrinfo(...) (pthread_testcancel(), getaddrinfo(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define getchar(...) (pthread_testcancel(), getchar(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'getchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define getchar_unlocked(...) (pthread_testcancel(), getchar_unlocked(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[541]}],"prevLine":"#define getc_unlocked(...) (pthread_testcancel(), getc_unlocked(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define gets(...) (pthread_testcancel(), gets(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'gets' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define getservbyname(...) (pthread_testcancel(), getservbyname(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[570]}],"prevLine":"#define getpwuid_r(...) (pthread_testcancel(), getpwuid_r(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define getwc(...) (pthread_testcancel(), getwc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'getwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#undef getwchar","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[578]}],"prevLine":"#undef getwc","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define getwchar(...) (pthread_testcancel(), getwchar(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'getwchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define getwd(...) (pthread_testcancel(), getwd(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[580]}],"prevLine":"#undef getwchar","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define localtime(...) (pthread_testcancel(), localtime(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'localtime' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define lseek(...) (pthread_testcancel(), lseek(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[587]}],"prevLine":"#define link(...) (pthread_testcancel(), link(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define perror(...) (pthread_testcancel(), perror(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'perror' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define popen(...) (pthread_testcancel(), popen(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[596]}],"prevLine":"#define pclose(...) (pthread_testcancel(), pclose(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define printf(...) (pthread_testcancel(), printf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'printf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define putc(...) (pthread_testcancel(), putc(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[621]}],"prevLine":"#define posix_typed_mem_open(...) (pthread_testcancel(), posix_typed_mem_open(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putc(...) (pthread_testcancel(), putc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'putc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define putc_unlocked(...) (pthread_testcancel(), putc_unlocked(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[622]}],"prevLine":"#define printf(...) (pthread_testcancel(), printf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putchar(...) (pthread_testcancel(), putchar(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'putchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define putchar_unlocked(...) (pthread_testcancel(), putchar_unlocked(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[624]}],"prevLine":"#define putc_unlocked(...) (pthread_testcancel(), putc_unlocked(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define puts(...) (pthread_testcancel(), puts(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'puts' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define pututxline(...) (pthread_testcancel(), pututxline(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[626]}],"prevLine":"#define putchar_unlocked(...) (pthread_testcancel(), putchar_unlocked(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putwc(...) (pthread_testcancel(), putwc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'putwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#undef putwchar","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[629]}],"prevLine":"#undef putwc","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define putwchar(...) (pthread_testcancel(), putwchar(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'putwchar' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define readdir(...) (pthread_testcancel(), readdir(__VA_ARSG__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[631]}],"prevLine":"#undef putwchar","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define remove(...) (pthread_testcancel(), remove(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'remove' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define rename(...) (pthread_testcancel(), rename(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[634]}],"prevLine":"#define readdir_r(...) (pthread_testcancel(), readdir_r(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define rename(...) (pthread_testcancel(), rename(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'rename' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define rewind(...) (pthread_testcancel(), rewind(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[635]}],"prevLine":"#define remove(...) (pthread_testcancel(), remove(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define rewind(...) (pthread_testcancel(), rewind(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'rewind' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define rewinddir(...) (pthread_testcancel(), rewinddir(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[636]}],"prevLine":"#define rename(...) (pthread_testcancel(), rename(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define scanf(...) (pthread_testcancel(), scanf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'scanf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define seekdir(...) (pthread_testcancel(), seekdir(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[638]}],"prevLine":"#define rewinddir(...) (pthread_testcancel(), rewinddir(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define strerror(...) (pthread_testcancel(), strerror(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'strerror' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define strerror_r(...) (pthread_testcancel(), strerror_r(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[649]}],"prevLine":"#define stat(...) (pthread_testcancel(), stat(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define strftime(...) (pthread_testcancel(), strftime(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'strftime' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define symlink(...) (pthread_testcancel(), symlink(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[651]}],"prevLine":"#define strerror_r(...) (pthread_testcancel(), strerror_r(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define tmpfile(...) (pthread_testcancel(), tmpfile(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'tmpfile' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define tmpnam(...) (pthread_testcancel(), tmpnam(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[655]}],"prevLine":"#define syslog(...) (pthread_testcancel(), syslog(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define tmpnam(...) (pthread_testcancel(), tmpnam(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'tmpnam' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define ttyname(...) (pthread_testcancel(), ttyname(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[656]}],"prevLine":"#define tmpfile(...) (pthread_testcancel(), tmpfile(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define ungetc(...) (pthread_testcancel(), ungetc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'ungetc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define ungetwc(...) (pthread_testcancel(), ungetwc(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[660]}],"prevLine":"#define tzset(...) (pthread_testcancel(), tzset(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define ungetwc(...) (pthread_testcancel(), ungetwc(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'ungetwc' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define unlink(...) (pthread_testcancel(), unlink(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[661]}],"prevLine":"#define ungetc(...) (pthread_testcancel(), ungetc(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define vfprintf(...) (pthread_testcancel(), vfprintf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'vfprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define vfwprintf(...) (pthread_testcancel(), vfwprintf(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[663]}],"prevLine":"#define unlink(...) (pthread_testcancel(), unlink(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define vfwprintf(...) (pthread_testcancel(), vfwprintf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'vfwprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define vprintf(...) (pthread_testcancel(), vprintf(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[664]}],"prevLine":"#define vfprintf(...) (pthread_testcancel(), vfprintf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define vprintf(...) (pthread_testcancel(), vprintf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'vprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define vwprintf(...) (pthread_testcancel(), vwprintf(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[665]}],"prevLine":"#define vfwprintf(...) (pthread_testcancel(), vfwprintf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define vwprintf(...) (pthread_testcancel(), vwprintf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'vwprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define wcsftime(...) (pthread_testcancel(), wcsftime(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[666]}],"prevLine":"#define vprintf(...) (pthread_testcancel(), vprintf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define wcsftime(...) (pthread_testcancel(), wcsftime(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'wcsftime' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define wordexp(...) (pthread_testcancel(), wordexp(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[667]}],"prevLine":"#define vwprintf(...) (pthread_testcancel(), vwprintf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define wprintf(...) (pthread_testcancel(), wprintf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'wprintf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define wscanf(...) (pthread_testcancel(), wscanf(__VA_ARGS__))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[669]}],"prevLine":"#define wordexp(...) (pthread_testcancel(), wordexp(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define wscanf(...) (pthread_testcancel(), wscanf(__VA_ARGS__))","falseAlarm":false,"level":3,"message":"The 'wscanf' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\pthread.h","lines":[670]}],"prevLine":"#define wprintf(...) (pthread_testcancel(), wprintf(__VA_ARGS__))","sastId":"CERT-DCL51-CPP"}
{"code":"V1003","currLine":"#  define __glibcxx_requires_string(_String) \\","falseAlarm":false,"level":3,"message":"The macro '__glibcxx_requires_string' is a dangerous expression. The parameter '_String' must be surrounded by parentheses.","nextLine":"  _GLIBCXX_DEBUG_PEDASSERT(_String != 0)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\debug\\debug.h","lines":[122]}],"prevLine":"# if __cplusplus < 201103L"}
{"code":"V1003","currLine":"#  define __glibcxx_requires_string_len(_String,_Len) \\","falseAlarm":false,"level":3,"message":"The macro '__glibcxx_requires_string_len' is a dangerous expression. The parameters '_String', '_Len' must be surrounded by parentheses.","nextLine":"  _GLIBCXX_DEBUG_PEDASSERT(_String != 0 || _Len == 0)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\debug\\debug.h","lines":[124]}],"prevLine":"  _GLIBCXX_DEBUG_PEDASSERT(_String != 0)"}
{"code":"V1003","currLine":"#  define __glibcxx_requires_string(_String) \\","falseAlarm":false,"level":3,"message":"The macro '__glibcxx_requires_string' is a dangerous expression. The parameter '_String' must be surrounded by parentheses.","nextLine":"  _GLIBCXX_DEBUG_PEDASSERT(_String != nullptr)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\debug\\debug.h","lines":[127]}],"prevLine":"# else"}
{"code":"V1003","currLine":"#  define __glibcxx_requires_string_len(_String,_Len) \\","falseAlarm":false,"level":3,"message":"The macro '__glibcxx_requires_string_len' is a dangerous expression. The parameters '_String', '_Len' must be surrounded by parentheses.","nextLine":"  _GLIBCXX_DEBUG_PEDASSERT(_String != nullptr || _Len == 0)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\debug\\debug.h","lines":[129]}],"prevLine":"  _GLIBCXX_DEBUG_PEDASSERT(_String != nullptr)"}
{"code":"V1003","currLine":"  #define rand_r(__seed) (__seed == __seed ? rand () : rand ())","falseAlarm":false,"level":3,"message":"The macro 'rand_r' is a dangerous expression. The parameter '__seed' must be surrounded by parentheses.","nextLine":"  #endif","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h","lines":[475]}],"prevLine":"  #ifndef rand_r"}
{"code":"V1059","currLine":"#define iswalpha(_c) (iswctype(_c,_ALPHA))","falseAlarm":false,"level":3,"message":"The 'iswalpha' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[144]}],"prevLine":"#ifndef __cplusplus","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","falseAlarm":false,"level":3,"message":"The 'iswupper' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[145]}],"prevLine":"#define iswalpha(_c) (iswctype(_c,_ALPHA))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","falseAlarm":false,"level":3,"message":"The 'iswlower' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[146]}],"prevLine":"#define iswupper(_c) (iswctype(_c,_UPPER))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswdigit' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[147]}],"prevLine":"#define iswlower(_c) (iswctype(_c,_LOWER))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","falseAlarm":false,"level":3,"message":"The 'iswxdigit' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[148]}],"prevLine":"#define iswdigit(_c) (iswctype(_c,_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","falseAlarm":false,"level":3,"message":"The 'iswspace' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[149]}],"prevLine":"#define iswxdigit(_c) (iswctype(_c,_HEX))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","falseAlarm":false,"level":3,"message":"The 'iswpunct' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[150]}],"prevLine":"#define iswspace(_c) (iswctype(_c,_SPACE))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswalnum' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[151]}],"prevLine":"#define iswpunct(_c) (iswctype(_c,_PUNCT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswprint' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[152]}],"prevLine":"#define iswalnum(_c) (iswctype(_c,_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","falseAlarm":false,"level":3,"message":"The 'iswgraph' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswcntrl(_c) (iswctype(_c,_CONTROL))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[153]}],"prevLine":"#define iswprint(_c) (iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1059","currLine":"#define iswcntrl(_c) (iswctype(_c,_CONTROL))","falseAlarm":false,"level":3,"message":"The 'iswcntrl' macro name overrides a reserved name from C standard. This may lead to undefined behavior.","nextLine":"#define iswascii(_c) ((unsigned)(_c) < 0x80)","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\x86_64-w64-mingw32\\include\\wctype.h","lines":[154]}],"prevLine":"#define iswgraph(_c) (iswctype(_c,_PUNCT|_ALPHA|_DIGIT))","sastId":"CERT-DCL51-CPP"}
{"code":"V1003","currLine":"#define __glibcxx_digits_b(T,B)    \\","falseAlarm":false,"level":3,"message":"The macro '__glibcxx_digits_b' is a dangerous expression. The parameter 'B' must be surrounded by parentheses.","nextLine":"  (B - __glibcxx_signed_b (T,B))","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\limits","lines":[137]}]}
{"code":"V001","currLine":"   if constexpr (__is_same(_Tp, long double))","falseAlarm":false,"level":3,"message":"A code fragment cannot be analyzed.","nextLine":"     return __LDBL_MIN_EXP__ == -16381 ? _X86_80bit : _M68k_80bit;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\compare","lines":[711]}],"prevLine":"#if __LDBL_MANT_DIG__ == 64"}
{"code":"V001","currLine":"   if constexpr (__reference_constructs_from_temporary(_T1, _U1&&))","falseAlarm":false,"level":3,"message":"A code fragment cannot be analyzed.","nextLine":"     return true;","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_pair.h","lines":[291]}],"prevLine":"#if __has_builtin(__reference_constructs_from_temporary)"}
{"code":"V001","currLine":"      const bool __assignable","falseAlarm":false,"level":3,"message":"A code fragment cannot be analyzed.","nextLine":" = _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);","positions":[{"file":"D:\\CLion 2023.2.2\\license\\CLion 2023.2.2\\bin\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\13.1.0\\include\\c++\\bits\\stl_uninitialized.h","lines":[181,249,319]}],"prevLine":"#endif"}
